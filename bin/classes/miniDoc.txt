WAKE, HOW TO RELEASE NEW VERSION
	free:
		constants.pro = false;
		rename application package "com.mammothGames.wake1free"
		rename application name "Wake Free"
		
	pro:
		constants.pro = true;
		rename application package "com.mammothGames.wake1"
		rename application name "Wake"

timer:
	double time = System.currentTimeMillis();
	Log.e("reywas", (System.currentTimeMillis() - time) + "");
	
Log.e("reywas", "");

// Tweening (in function):
new_value = start_Value * ( t * ( end_value - start_value ) );

// Easing (run every frame):
x+= (target - x) * 0.1 * ref.main.time_scale;

// Load high score
String high_score_string = ref.file.load("int_high_score");
if (high_score_string.equals("")) {
	high_score = 0;
} else {
	high_score = Integer.parseInt(ref.file.load("int_high_score")); 
}


Object pools:

	utility_pool<poolObj_greenOrb> greenOrb_pool = new utility_pool<poolObj_orb>(ref, poolObj_orb.class, poolSize);
	poolObj_greenOrb temp_greenOrb;

	// Use this to get a pool object and set its local vars.
	temp_scoreEffect = scoreEffect_pool.takeObject();
		//temp_scoreEffect = (poolObj_scoreEffect) scoreEffect_pool.takeObject();

	// Update pool logic
	for(int i_objects = 0; i_objects < greenOrb_pool.MAX_OBJECTS; i_objects++) {
			temp_greenOrb = greenOrb_pool.getInstance(i_objects);
			if ((temp_greenOrb.sys_in_use)) {
				// Do some stuff with the pool objects.
			}
	}
	
	// 'Delete' the current working pool object, ie return it to the pool
	scoreEffect_pool.returnObject(temp_scoreEffect.sys_id);