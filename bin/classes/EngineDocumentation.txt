Don't even bother reading this. It's not filled out enough to actually use.
I'm planning an entire website for this.

When changing the directory name for a new game, remember to update the package name in the Manifest. It doesn't update itself for some reason.
	package="com.reywas.testGameName"
	
PROJECT SET UP:

	Changing your icon:
		It's in res/drawable-nodpi/icon_name.png
		
		Note:
			The icon name cannot contain Upper Case letters!
			
		In AndroidManifest.xml:
        	android:icon="@drawable/icon_name"
			
	Changing your Application Package:
	
		Rename all folders in src/yourName/gameName
		In AndroidManifest.xml
			Change the package name to the new name
			package="com.yourName.gameName"
			Find all imports of yourName.oldGameName.R and rename them appropriately.
		
		For Eclipse IDE users:
			Right Click project name in Package Explorer > Android Tools > Rename Application Package
			Right Click src > packageName name in Package Explorer > Refactor > Rename
			
			
	Changing your Application Name:
		res > values > strings.xml
			<?xml version="1.0" encoding="utf-8"?>
			<resources>
			    <string name="app_name">App Name Here</string>
			</resources>
		
	
RESOURCES:
	


ENTITIES:





STRINGS:

	Using the normal way of dealing with Java strings is slow for drawing every frame and eventually causes game-killing garbage collection.
	This method gets us around that.
	
	Copy this to wherever you need to draw a string, and copy the second line as many times as needed to concatenate all parts of the final string:

		ref.draw.text.append(string);
		ref.draw.drawText(x, y, size, ref.draw.X_ALIGN_CENTER, ref.draw.Y_ALIGN_CENTER, depth, game_textures.FONT_TEXTURE_NAME);

	The other option is to use strings like normal, but only update them when they would contain new values.
		EXAMPLE:
			String score = "Score: ";
			updateScore() {
				score = "Score: " + int_points;
			}
			draw() {
				drawString(args,...,score);
			}




ROOMS:

	To add a new room:
	To move between rooms, and what happens when you do:
	
	Note - Persistent objects:


SOUNDS:

	Only one music track can be loaded at a time, but you can load as many sound effects as you want.
	
	Loading Sounds:
	Loading Music:
	
	Playing Sounds:
	Playing Music:


DRAWING:

	COLOR:
		Background:
		Sprite/Shape:
		
	TEXTURES:
	
		To add a new texture:
		To load a texture:
		
		game_textuers.TEXTURE_NAME
	
	SHAPES:
	
		Rectangles:
		Circles:
	

ADS:
	
	Setting your admob ID
	Positioning
	Loading/Unloading

FILE IO:

	Saving:
	
	Loading:
		EXAMPLE:
			String temp_string = ref.file.load("test");
			if (temp_string != "")
				// Do stuff with temp_string

MENU/BACK BUTTON HANDLING:

Override
	engine_entity.backButton()
	engine_entity.menuButton()
		
	To replicate the default back button behavior, call this:
		ref.android.finish();

